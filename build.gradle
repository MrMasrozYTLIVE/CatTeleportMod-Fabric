import net.darkhax.curseforgegradle.TaskPublishCurseForge

plugins {
	id("fabric-loom") version("1.7-SNAPSHOT")
	id("maven-publish")
	id("com.modrinth.minotaur") version("2.8.7")
	id("net.darkhax.curseforgegradle") version("1.1.24")
	id("com.github.breadmoirai.github-release") version("2.5.2")
	id("org.ajoberstar.grgit.service") version("5.2.2")
}

apply(plugin: "com.modrinth.minotaur")
apply(plugin: "com.github.breadmoirai.github-release")
apply(plugin: "org.ajoberstar.grgit.service")

sourceCompatibility = JavaVersion.VERSION_21
targetCompatibility = JavaVersion.VERSION_21

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
	maven { url "https://maven.shedaniel.me/" }
	maven { url "https://maven.terraformersmc.com/releases" }
	maven { url "https://maven.fabricmc.net/" }
	maven { url = "https://api.modrinth.com/maven" }
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	modApi("me.shedaniel.cloth:cloth-config-fabric:${clothconfig_version}") {
            exclude(group: "net.fabricmc.fabric-api")
	}
	modImplementation "com.terraformersmc:modmenu:11.0.1"
	implementation "javax.annotation:javax.annotation-api:1.3.2"
	implementation 'com.google.code.findbugs:jsr305:3.0.2'

	compileOnly 'org.projectlombok:lombok:1.18.34'
	annotationProcessor 'org.projectlombok:lombok:1.18.34'
}

processResources {
	def expandProps = [
			"version": project.version,
			"loader_version": loader_version,
			"minecraft_version": minecraft_version,
			"clothconfig_version": clothconfig_version
	]

	filesMatching("fabric.mod.json") {
		expand expandProps
	}

	inputs.properties(expandProps)
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
	it.options.release = 21
}

jar {
	from(rootProject.file("LICENSE")) {
		rename { "${it}_${project.archivesBaseName}" }
	}
	manifest {
		attributes([
				"Specification-Title"     : "CatTeleportMod",
				"Specification-Vendor"    : "MiTask",
				"Specification-Version"   : project.jar.archiveVersion,
				"Implementation-Title"    : project.name,
				"Implementation-Version"  : project.jar.archiveVersion,
				"Implementation-Vendor"   : "MiTask",
				"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
				"Timestamp"               : System.currentTimeMillis(),
				"Built-On-Java"           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
				"Built-On-Minecraft"      : minecraft_version
		])
	}
}

afterEvaluate {
	modrinth {
		token = System.getenv().MODRINTH_TOKEN ? System.getenv().MODRINTH_TOKEN : "empty"
		projectId = modrinth_id
		versionNumber = mod_version
		versionType = release_type
		versionName = "v${mod_version.split("-")[1]}-Fabric-${minecraft_version}"
		changelog = rootProject.file("changelog.md").text
		uploadFile = remapJar
		loaders = List.of("fabric", "quilt")
		gameVersions = List.of(minecraft_versions)
		syncBodyFrom = rootProject.file("README.md").text
	}
	tasks.modrinth.onlyIf { System.getenv().MODRINTH_TOKEN }
	tasks.modrinth.dependsOn(build, tasks.modrinthSyncBody)
	tasks.modrinthSyncBody.onlyIf { System.getenv().MODRINTH_TOKEN }

	task curseforge(type: TaskPublishCurseForge) {
		apiToken = System.getenv().CURSEFORGE_TOKEN ? System.getenv().CURSEFORGE_TOKEN : ""
		if (apiToken.isBlank()) return

		disableVersionDetection()

		def file = upload(curseforge_id, remapJar)
		file.displayName = "v${mod_version.split("-")[1]}-Fabric-${minecraft_version}"
		file.releaseType = release_type
		file.changelog = rootProject.file("changelog.md").text
		file.changelogType = 'markdown'

		file.addModLoader("fabric")
		file.addModLoader("quilt")

		project.property("minecraft_versions").split(",").each { String id ->
			file.addGameVersion(id, "fabric")
		}
	}
	tasks.curseforge.onlyIf { System.getenv().CURSEFORGE_TOKEN }
	tasks.curseforge.dependsOn(build)

	githubRelease {
		token = System.getenv().GITHUB_TOKEN ? System.getenv().GITHUB_TOKEN : "empty"
		owner = github_repo_owner
		repo = github_repo
		tagName = "v${mod_version}"
		prerelease = release_type == "alpha" || release_type == "beta"
		releaseName = "v${mod_version.split("-")[1]} ${minecraft_version}"
		body = rootProject.file("changelog.md").text
		targetCommitish = grgitService.service.get().grgit.branch.current().name
		overwrite = false
		allowUploadToExisting = true
		releaseAssets = List.of(remapJar)
	}
	tasks.githubRelease.onlyIf { System.getenv().GITHUB_TOKEN }
	tasks.githubRelease.dependsOn(build)
}