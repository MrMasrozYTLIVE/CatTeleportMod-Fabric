plugins {
	id("fabric-loom") version("1.7-SNAPSHOT")
	id("maven-publish")
	id("com.hypherionmc.modutils.modpublisher") version("2.1.6")
}

sourceCompatibility = JavaVersion.VERSION_21
targetCompatibility = JavaVersion.VERSION_21

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
	maven { url "https://maven.shedaniel.me/" }
	maven { url "https://maven.terraformersmc.com/releases" }
	maven { url "https://maven.fabricmc.net/" }
	maven { url = "https://api.modrinth.com/maven" }
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	modApi("me.shedaniel.cloth:cloth-config-fabric:${clothconfig_version}") {
            exclude(group: "net.fabricmc.fabric-api")
	}
	modImplementation "com.terraformersmc:modmenu:11.0.1"
	implementation "javax.annotation:javax.annotation-api:1.3.2"
	implementation 'com.google.code.findbugs:jsr305:3.0.2'

	compileOnly 'org.projectlombok:lombok:1.18.34'
	annotationProcessor 'org.projectlombok:lombok:1.18.34'

	modImplementation "maven.modrinth:autoreconnectrf:TnGBOBXZ"
}

processResources {
	def expandProps = [
			"version": project.version,
			"loader_version": loader_version,
			"minecraft_version": minecraft_version,
			"clothconfig_version": clothconfig_version
	]

	filesMatching("fabric.mod.json") {
		expand expandProps
	}

	inputs.properties(expandProps)
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
	it.options.release = 21
}

jar {
	from(rootProject.file("LICENSE")) {
		rename { "${it}_${project.archivesBaseName}" }
	}
	manifest {
		attributes([
				"Specification-Title"     : "CatTeleportMod",
				"Specification-Vendor"    : "MiTask",
				"Specification-Version"   : project.jar.archiveVersion,
				"Implementation-Title"    : project.name,
				"Implementation-Version"  : project.jar.archiveVersion,
				"Implementation-Vendor"   : "MiTask",
				"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
				"Timestamp"               : System.currentTimeMillis(),
				"Built-On-Java"           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
				"Built-On-Minecraft"      : minecraft_version
		])
	}
}

publisher {
	apiKeys {
		modrinth System.getenv().MODRINTH_TOKEN
		curseforge System.getenv().CURSEFORGE_TOKEN
		github System.getenv().GITHUB_TOKEN
	}

	setDebug(true)

	setCurseID(curseforge_id)
	setModrinthID(modrinth_id)

	setVersionType(release_type)
	setChangelog("changelog.md")

	setProjectVersion(mod_version)
	setDisplayName("CatTeleportMod ${mod_version}")

	setGameVersions(List.of(minecraft_versions))

	setLoaders("fabric")
	setCurseEnvironment("client")

	setArtifact(remapJar)

	setDisableMalwareScanner(true)

	setJavaVersions(List.of(JavaVersion.VERSION_21))
	setDisableEmptyJarCheck(true)

	github {
		repo = "MrMasrozYTLIVE/CatTeleportMod-Fabric"
		tag = "CatTeleportMod ${mod_version}"
		target = "master"
	}

	modrinthDepends {
		required "fabric-api", "cloth-config"
		optional 'modmenu'
	}

	curseDepends {
		required "fabric-api", "cloth-config"
		optional 'modmenu'
	}
}